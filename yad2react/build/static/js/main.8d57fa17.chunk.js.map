{"version":3,"sources":["components/MainNavBar.js","components/SeconderyNavBar.js","components/Listings.js","components/MainPage.js","routes/AppRouter.js","store/store.js","App.js","serviceWorker.js","index.js"],"names":["MainNavBar","dosentExistAlert","text","alert","mainNavBarCategories","clickHandler","mainNavBarActions","className","key","src","alt","map","category","onClick","action","SecondaryNavBar","secondaryNavBarCategories","secondaryNavBarActions","Listings","fetch","then","res","console","log","MainPage","history","createBrowserHistory","AppRouter","path","component","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8d57fa17.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst MainNavBar = () => {\r\n  const dosentExistAlert = text => alert(`כאן יהיה עמוד ${text}`);\r\n  const mainNavBarCategories = [\r\n    { text: 'נדל\"ן', clickHandler: dosentExistAlert },\r\n    { text: \"רכב\", clickHandler: dosentExistAlert },\r\n    { text: \"יד שנייה\", clickHandler: dosentExistAlert },\r\n    { text: \"הכל לעסק\", clickHandler: dosentExistAlert },\r\n    { text: \"דרושים\", clickHandler: dosentExistAlert },\r\n    { text: \"חיות מחמד\", clickHandler: dosentExistAlert },\r\n    { text: \"בעלי מקצוע\", clickHandler: dosentExistAlert },\r\n    { text: \"עוד...\", clickHandler: dosentExistAlert }\r\n  ];\r\n\r\n  const mainNavBarActions = [\r\n    { text: \"השוואת רכבים\", clickHandler: dosentExistAlert },\r\n    { text: \"חיפושים אחרונים\", clickHandler: dosentExistAlert },\r\n    { text: \"מודעות שמורות\", clickHandler: dosentExistAlert },\r\n    { text: \"אזור אישי\", clickHandler: dosentExistAlert }\r\n  ];\r\n\r\n  return (\r\n    <div className=\"main-nav-bar--container\">\r\n       <ul className=\"list__nav-bar\">\r\n        <li key='img' className='main-nav-bar--list-item'>\r\n          <button className=\"main-nav-bar--image\">\r\n            <img src=\"images/Yad2_logo_white2.svg\" alt=\"yad2logo\" />\r\n          </button>\r\n        </li>\r\n        {mainNavBarCategories.map(category => (\r\n          <li key={category.text} className='main-nav-bar--list-item'>\r\n            <button\r\n              className=\"main-nav-bar-button\"\r\n              onClick={() => category.clickHandler(category.text)}\r\n            >\r\n              {category.text}\r\n            </button>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n      <ul className=\"list__nav-bar\">\r\n        {mainNavBarActions.map(action => (\r\n          <li key={action.text} className='main-nav-bar--list-item'>\r\n            <button\r\n              className=\"main-nav-bar-button\"\r\n              onClick={() => action.clickHandler(action.text)}\r\n            >\r\n              {action.text}\r\n            </button>\r\n          </li>\r\n        ))}\r\n        <li className='main-nav-bar--list-item'>\r\n          <button className=\"main-nav-bar-button add-post-button\">\r\n            פרסום מודעה\r\n          </button>\r\n        </li>\r\n      </ul> \r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MainNavBar;\r\n","import React from \"react\";\r\n\r\nconst SecondaryNavBar = () => {\r\n  const dosentExistAlert = text => alert(`כאן יהיה עמוד ${text}`);\r\n  const secondaryNavBarCategories = [\r\n    { text: \"מכירה\", clickHandler: dosentExistAlert },\r\n    { text: \"השכרה\", clickHandler: dosentExistAlert },\r\n    { text: \"דירות שותפים\", clickHandler: dosentExistAlert },\r\n    { text: 'נדל\"ן מסחרי', clickHandler: dosentExistAlert }\r\n  ];\r\n\r\n  const secondaryNavBarActions = [\r\n    { text: \"כונס נכסים\", clickHandler: dosentExistAlert },\r\n    { text: 'מדד הנדל\"ן', clickHandler: dosentExistAlert },\r\n    { text: \"יד1 דירות חדשות\", clickHandler: dosentExistAlert },\r\n    { text: \"הערכת שווי נכס\", clickHandler: dosentExistAlert }\r\n  ];\r\n\r\n  return (\r\n    <div className=\"secondary-nav-bar--container\">\r\n      <ul className=\"list__nav-bar\">\r\n        {secondaryNavBarCategories.map(category => (\r\n          <li key={category.text} className=\"list-item__nav-bar\">\r\n            <button\r\n              className=\"secondary-nav-bar-button\"\r\n              onClick={() => category.clickHandler(category.text)}\r\n            >\r\n              {category.text}\r\n            </button>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n      <ul className=\"list__nav-bar\">\r\n        {secondaryNavBarActions.map(action => (\r\n          <li key={action.text} className=\"list-item__nav-bar\">\r\n            <button\r\n              className=\"secondary-nav-bar-button\"\r\n              onClick={() => action.clickHandler(action.text)}\r\n            >\r\n              {action.text}\r\n            </button>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SecondaryNavBar;\r\n","import React, { useReducer } from \"react\";\r\n// import axios from \"axios\";\r\n//\r\n// const axiosInstance = axios.create({baseURL: 'localhost:3000'})\r\n\r\n\r\n\r\nconst Listings = () => {\r\n//   useEffect(() => {\r\n    // axiosInstance\r\n    //   .get(\"/listings/get\")\r\n    //   .then(response => console.log(response))\r\n    //   .catch(e => console.log(e));\r\n\r\n    //         const listings = JSON.parse(localStorage.getItem('notes'))\r\n\r\n    //         if (notes) {\r\n    //             dispatch({ type: 'POPULATE_NOTES', notes })\r\n    //         }\r\n    //     }, [])\r\n\r\n    // const [listings, dispatch] = useReducer(listingsReducer, []);\r\n\r\nfetch('/listings').then(res => console.log(res));\r\n\r\n\r\n    return <div>שלום</div>;\r\n  };\r\n\r\nexport default Listings;\r\n","import React from 'react';\r\nimport MainNavBar from './MainNavBar';\r\nimport SecondaryNavBar from './SeconderyNavBar';\r\nimport Listings from './Listings';\r\n\r\nconst MainPage = () => (\r\n    <div>\r\n        <MainNavBar />\r\n        <SecondaryNavBar />\r\n        <Listings />\r\n    </div>\r\n);\r\n\r\nexport default MainPage;","import React from \"react\";\r\nimport { Router, Route, Switch } from \"react-router-dom\";\r\nimport {createBrowserHistory}  from 'history';\r\nimport MainPage from '../components/MainPage';\r\n\r\nexport const history = createBrowserHistory()\r\n\r\nconst AppRouter = () => (\r\n    <Router history={history}>\r\n        <div>\r\n            <Switch>\r\n                <Route path='/' component={MainPage} />\r\n            </Switch>\r\n        </div>\r\n    </Router>\r\n)\r\n\r\nexport default AppRouter;","import { createStore, combineReducers, applyMiddleware, compose } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n\r\nexport default () => {\r\n  const store = createStore(\r\n    // combineReducers({\r\n    // }),\r\n    composeEnhancers(applyMiddleware(thunk))\r\n  );\r\n  return store;\r\n};\r\n","import React from 'react';\nimport { Provider } from \"react-redux\";\nimport AppRouter from \"./routes/AppRouter\";\nimport configureStore from \"./store/store\";\n\nconst store = configureStore();\n\nconst App = () => (\n  <Provider store={store}>\n    <AppRouter />\n  </Provider>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport './styles/styles.scss';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}